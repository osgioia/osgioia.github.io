{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","skills","projects","watchConsoleLogging","color","backgroundColor","hideTopBar","allowTabs","startState","showActions","prompt","promptSymbol","style","fontWeight","fontSize","width","height","commands","window","open","this","descriptions","msg","join","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAIqBA,G,kNACnBC,OAAS,iBAAM,sK,EACfC,SAAW,iBAAM,wB,uDAIf,OACE,6BAEE,kBAAC,IAAD,CAAUC,qBAAmB,EAC3BC,MAAM,QACNC,gBAAgB,QAChBC,YAAY,EACZC,WAAW,EACXC,WAAW,YACXC,aAAa,EACbC,OAAO,QACPC,aAAa,sBACbC,MAAO,CAAEC,WAAY,OAAQC,SAAU,MAAOC,MAAO,OAASC,OAAQ,SACtEC,SAAU,CACR,QAAW,kBAAMC,OAAOC,KAAK,8BAA+B,WAC5D,OAAU,kBAAMD,OAAOC,KAAK,8BAA+B,WAC3D,SAAY,kBAAMD,OAAOC,KAAK,4CAA6C,WAC3E,QAAW,kBAAMD,OAAOC,KAAK,8BAA+B,WAC5D,KAAQ,kBAAMD,OAAOC,KAAK,qCAAsC,WAChElB,OAAQmB,KAAKnB,OACbC,SAAUkB,KAAKlB,UAEjBmB,aAAc,CACZ,QAAW,aACX,OAAU,oBACV,SAAY,sBACZ,QAAW,kBACX,KAAQ,aACR,OAAU,cACV,SAAY,iBAGdC,IAAM,CACJ,kDACA,iCACAC,KAAK,a,GAzCgBC,cCQbC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.06e7555b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Terminal from 'terminal-in-react';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  skills = () => 'Python, NodeJS, VB.NET, C#, SQL Server, MySQL, MariaDB, MongoDB, Oracle, Postgres, Entity Framework, React, Docker, Amazon Web Services (EC2, S3), Heroku, Jenkins'\r\n  projects = () => 'Not yet implemented!'\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n        <Terminal watchConsoleLogging\r\n          color=\"white\"\r\n          backgroundColor=\"black\"\r\n          hideTopBar={true}\r\n          allowTabs={false}\r\n          startState=\"maximised\"\r\n          showActions={false}\r\n          prompt='white'\r\n          promptSymbol='root@osgioia.dev:~$'\r\n          style={{ fontWeight: 'bold', fontSize: '1em', width: \"100%\" , height: \"100vh\" }}\r\n          commands={{\r\n            'twitter': () => window.open('https://twitter.com/aioigzo', '_blank'),\r\n            'github': () => window.open('https://github.com/osgioia/', '_blank'),\r\n            'linkedin': () => window.open('https://www.linkedin.com/in/osvaldogioia/', '_blank'),\r\n            'codepen': () => window.open('https://codepen.io/osgioia/', '_blank'),\r\n            'blog': () => window.open('https://collectednotes.com/aioigzo', '_blank'),\r\n            skills: this.skills,\r\n            projects: this.projects,\r\n          }}\r\n          descriptions={{\r\n            'twitter': 'My Twitter',\r\n            'github': 'My Repo in Github',\r\n            'linkedin': 'My Linkedin Profile',\r\n            'codepen': 'Codepen Profile',\r\n            'blog': 'My Blog :)',\r\n            'skills': 'Show Skills',\r\n            'projects': 'Show Projects',\r\n\r\n          }}\r\n          msg= {[\r\n            'Welcome To Osvaldo Gioia - FullStack Developer!',\r\n            'Type \"help\" for the commands.'\r\n          ].join('\\n')}  \r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}